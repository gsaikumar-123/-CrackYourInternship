class Solution {
private:
    void merge(vector<int>& nums, int low, int mid, int high, int& res) {
        int j = mid + 1;
        for (int i = low; i <= mid; i++) {
            while (j <= high && nums[i] > 2LL * nums[j]) {
                j++;
            }
            res += j - (mid + 1);
        }
        
        vector<int> temp(high - low + 1);
        int left = low, right = mid + 1, k = 0;
        
        while (left <= mid && right <= high) {
            if (nums[left] <= nums[right]) {
                temp[k++] = nums[left++];
            } else {
                temp[k++] = nums[right++];
            }
        }
        
        while (left <= mid) {
            temp[k++] = nums[left++];
        }
        
        while (right <= high) {
            temp[k++] = nums[right++];
        }
        
        for (int i = 0; i < temp.size(); i++) {
            nums[low + i] = temp[i];
        }
    }

    void mergeSort(vector<int>& nums, int low, int high, int& res) {
        if (low >= high) {
            return;
        }
        
        int mid = low + (high - low) / 2;
        mergeSort(nums, low, mid, res);
        mergeSort(nums, mid + 1, high, res);
        merge(nums, low, mid, high, res);
    }
public:
    int reversePairs(vector<int>& nums) {
        int res = 0;
        mergeSort(nums, 0, nums.size() - 1, res);
        return res;
    }
};
