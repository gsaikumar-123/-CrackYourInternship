/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head->next == NULL){
            return 1;
        }
        if(head->next->next == NULL){
            if(head->val == head->next->val){
                return 1;
            }
            return 0;
        }
        
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* current = slow;
        ListNode *prev = NULL, *next = NULL;
 
        while (current != NULL) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        slow = prev;

        ListNode* temp1 = head;
        ListNode* temp2 = slow;

        while(temp2 != NULL){
            if(temp1->val != temp2->val){
                return 0;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
        return 1;
    }
};
